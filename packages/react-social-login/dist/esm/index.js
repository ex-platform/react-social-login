import{jsx as e,jsxs as o}from"react/jsx-runtime";import{useEffect as n}from"react";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */var t=function(){return t=Object.assign||function(e){for(var o,n=1,t=arguments.length;n<t;n++)for(var i in o=arguments[n])Object.prototype.hasOwnProperty.call(o,i)&&(e[i]=o[i]);return e},t.apply(this,arguments)};function i(){let e;return{initNaver:(o,n,t,i,s,a)=>{const c="naver_login";if(!!!document.getElementById(c)){const i=document.createElement("script");i.src="https://static.nid.naver.com/js/naveridlogin_js_sdk_2.0.0.js",i.onload=()=>{((o,n,t,i)=>{e=new window.naver.LoginWithNaverId({clientId:o,callbackUrl:n,isPopup:t,loginButton:{color:i.buttonColor,type:i.buttonType,height:i.buttonHeight}})})(o,n,t,a)},i.onerror=e=>console.log(e),i.id=c,document.head.appendChild(i)}},setNaver:()=>{e.init()},getUserInfo:(o,n)=>{e.getLoginStatus((t=>{if(t){const n=e.user.email,t=e.user.name;console.log(n,t),o(n)}else n()}))}}}class s{constructor(e){this.props=e}initiate(){const e="kakao-login-sdk";if(!!!document.getElementById(e)){const o=document.createElement("script");o.src="https://developers.kakao.com/sdk/js/kakao.js",o.onload=()=>window.Kakao.init(this.props.apiKey),o.onerror=e=>console.log("APPEND SCRIPT ERROR - ",e),o.id=e,document.head.appendChild(o)}}async login(){await window.Kakao.Auth.login({success:()=>this.getUserInfo(),fail:e=>{console.log("KAKAO LOGIN ERROR - ",e),this.props.fail(e)}})}async getUserInfo(){await window.Kakao.API.request({url:"/v2/user/me",success:e=>{console.log("GET KAKAO USER INFO - ",e),this.props.success(e)},fail:e=>{console.log("GET KAKAO USER INFO - ",e),this.props.fail(e)}})}}class a{constructor(e){this.props=e}initiate(){const e="google-login-sdk";if(!!!document.getElementById(e)){const o=document.createElement("script");o.src="https://apis.google.com/js/api:client.js",o.onload=()=>this.loadAndAttachLoginFunc(),o.onerror=e=>console.log("APPEND SCRIPT ERROR - ",e),o.id=e,document.head.appendChild(o)}}async loadAndAttachLoginFunc(){await window.gapi.load("auth2",(()=>{const e=window.gapi.auth2.init({client_id:this.props.clientId,cookiepolicy:"single_host_origin"}),o=document.querySelector("#"+this.props.elementId);e.attachClickHandler(o,{},(e=>this.successCallback(e)),(e=>this.failCallback(e)))}))}async successCallback(e){console.log("GOOGLE LOGIN SUCCESS");const o={name:await e.getBasicProfile().getName()};this.props.success(o)}failCallback(e){console.log("GOOGLE LOGIN FAIL - ",e),this.props.fail()}}function c(e,o){void 0===o&&(o={});var n=o.insertAt;if(e&&"undefined"!=typeof document){var t=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===n&&t.firstChild?t.insertBefore(i,t.firstChild):t.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}function l(o){var n=o.apiKey,i=o.success,a=o.fail,c=new s({apiKey:n,success:i,fail:a});return c.initiate(),e("div",t({className:"kakao-login",onClick:function(){return c.login()}},{children:e("span",{children:"카카오 로그인"},void 0)}),void 0)}c(".kakao-login {\n\tbackground-color: yellow;\n\tpadding: 10px;\n}\n");function r(o){var n=o.clientId,i=o.success,s=o.fail,c="google-login-button";return new a({clientId:n,elementId:c,success:i,fail:s}).initiate(),e("div",t({id:c,className:"google-login"},{children:e("span",{children:"구글 로그인"},void 0)}),void 0)}c(".google-login {\n\tbackground-color: red;\n\tpadding: 10px;\n}\n");function d(s){var a=s.clientId,c=s.callbackUrl,l=s.success,r=s.fail,d=s.isPopup,u=void 0!==d&&d,p=s.buttonColor,g=void 0===p?"green":p,h=s.buttonType,m=void 0===h?"3":h,f=s.buttonHeight,v={buttonColor:g,buttonType:m,buttonHeight:void 0===f?"60":f},k=i();return n((function(){k.initNaver(a,c,u,l,r,v)})),o("div",{children:[e("div",{id:"naverIdLogin",style:{display:"none"}},void 0),e("div",t({className:"naver-login",onClick:function(){k.getUserInfo(l,r)}},{children:e("span",{children:"네이버 로그인"},void 0)}),void 0)]},void 0)}c(".naver-login {\n\tbackground-color: green;\n\tpadding: 10px;\n}");export{r as GoogleLogin,l as KakaoLogin,d as NaverLogin};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
